function [Rays] = getPropagateRay(Rays,...
                                  TotalRays,...
                                  x,y,...
                                  difr,...
                                  LParametersZi,...
                                  LParametersZ,...
                                  HankelType) 
%% Obtain New coordinates of ray using a step of ray in z-direction,
%equation or ray r(z) = mrz*dz+r(z-1) using previous value
                                                         
  % each component of diferential dr 
  tempdr     = num2cell(difr);
  [~,~,dz] = deal(tempdr{:});
  
  temporalRay = OpticalRay(); 
  
  for point_index = 1 : TotalRays
      % copy data a temporal ray 
      temporalRay = copyArrayRay2Ray(Rays,temporalRay,point_index);

      % new coordinates of ray
      temporalRay.xCoordinate = temporalRay.xCoordinate + (1./temporalRay.zxSlope)*dz;
      temporalRay.yCoordinate = temporalRay.yCoordinate + (1./temporalRay.zxSlope)*dz;
      % obtain new (r,th) coordinates 
      [Rays.thetaCoordinate,Rays.rCoordinate] = cart2pol(Rays.xCoordinate,Rays.yCoordinate);

      % taking this new coordinates of point to calculate hankels
      ri  = temporalRay.rCoordinate;
      thi = temporalRay.thetaCoordinate;
      xi  = temporalRay.xCoordinate;
      yi  = temporalRay.yCoordinate;

      % calculating Hankels
      HLx     = HankelLaguerre(sqrt(x.^2 + yi.^2),atan2(yi,x) ,LParametersZi,HankelType);
      HLy     = HankelLaguerre(sqrt(xi.^2+ y.^2) ,atan2(y,xi) ,LParametersZi,HankelType);
      HLz     = HankelLaguerre(ri                ,thi         ,LParametersZ ,HankelType);

      fx      = unwrap(angle(HLx.OpticalFieldLaguerre));
      fy      = unwrap(angle(HLy.OpticalFieldLaguerre));
      fz      = unwrap(angle(HLz.OpticalFieldLaguerre));

       % Calculating gradient
      [temporalRay] = gradientxyz(fx,fy,fz,LParametersZi.k,difr,temporalRay);

      % copying new coordinates of ray to object that includes all rays
      Rays = copyRay2ArrayRay(temporalRay,Rays,point_index);                                
  end

end